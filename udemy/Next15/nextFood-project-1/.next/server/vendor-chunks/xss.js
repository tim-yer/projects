/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/xss";
exports.ids = ["vendor-chunks/xss"];
exports.modules = {

/***/ "(action-browser)/./node_modules/xss/lib/default.js":
/*!*****************************************!*\
  !*** ./node_modules/xss/lib/default.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * default settings\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var FilterCSS = (__webpack_require__(/*! cssfilter */ \"(action-browser)/./node_modules/cssfilter/lib/index.js\").FilterCSS);\nvar getDefaultCSSWhiteList = (__webpack_require__(/*! cssfilter */ \"(action-browser)/./node_modules/cssfilter/lib/index.js\").getDefaultWhiteList);\nvar _ = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/xss/lib/util.js\");\nfunction getDefaultWhiteList() {\n    return {\n        a: [\n            \"target\",\n            \"href\",\n            \"title\"\n        ],\n        abbr: [\n            \"title\"\n        ],\n        address: [],\n        area: [\n            \"shape\",\n            \"coords\",\n            \"href\",\n            \"alt\"\n        ],\n        article: [],\n        aside: [],\n        audio: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"preload\",\n            \"src\"\n        ],\n        b: [],\n        bdi: [\n            \"dir\"\n        ],\n        bdo: [\n            \"dir\"\n        ],\n        big: [],\n        blockquote: [\n            \"cite\"\n        ],\n        br: [],\n        caption: [],\n        center: [],\n        cite: [],\n        code: [],\n        col: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        colgroup: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        dd: [],\n        del: [\n            \"datetime\"\n        ],\n        details: [\n            \"open\"\n        ],\n        div: [],\n        dl: [],\n        dt: [],\n        em: [],\n        figcaption: [],\n        figure: [],\n        font: [\n            \"color\",\n            \"size\",\n            \"face\"\n        ],\n        footer: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        header: [],\n        hr: [],\n        i: [],\n        img: [\n            \"src\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\",\n            \"loading\"\n        ],\n        ins: [\n            \"datetime\"\n        ],\n        kbd: [],\n        li: [],\n        mark: [],\n        nav: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        section: [],\n        small: [],\n        span: [],\n        sub: [],\n        summary: [],\n        sup: [],\n        strong: [],\n        strike: [],\n        table: [\n            \"width\",\n            \"border\",\n            \"align\",\n            \"valign\"\n        ],\n        tbody: [\n            \"align\",\n            \"valign\"\n        ],\n        td: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tfoot: [\n            \"align\",\n            \"valign\"\n        ],\n        th: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        thead: [\n            \"align\",\n            \"valign\"\n        ],\n        tr: [\n            \"rowspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tt: [],\n        u: [],\n        ul: [],\n        video: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"playsinline\",\n            \"poster\",\n            \"preload\",\n            \"src\",\n            \"height\",\n            \"width\"\n        ]\n    };\n}\nvar defaultCSSFilter = new FilterCSS();\n/**\n * default onTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function onTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onIgnoreTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function onIgnoreTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function onTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default onIgnoreTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function onIgnoreTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default escapeHtml function\n *\n * @param {String} html\n */ function escapeHtml(html) {\n    return html.replace(REGEXP_LT, \"&lt;\").replace(REGEXP_GT, \"&gt;\");\n}\n/**\n * default safeAttrValue function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @param {Object} cssFilter\n * @return {String}\n */ function safeAttrValue(tag, name, value, cssFilter) {\n    // unescape attribute value firstly\n    value = friendlyAttrValue(value);\n    if (name === \"href\" || name === \"src\") {\n        // filter `href` and `src` attribute\n        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`\n        value = _.trim(value);\n        if (value === \"#\") return \"#\";\n        if (!(value.substr(0, 7) === \"http://\" || value.substr(0, 8) === \"https://\" || value.substr(0, 7) === \"mailto:\" || value.substr(0, 4) === \"tel:\" || value.substr(0, 11) === \"data:image/\" || value.substr(0, 6) === \"ftp://\" || value.substr(0, 2) === \"./\" || value.substr(0, 3) === \"../\" || value[0] === \"#\" || value[0] === \"/\")) {\n            return \"\";\n        }\n    } else if (name === \"background\") {\n        // filter `background` attribute (maybe no use)\n        // `javascript:`\n        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n            return \"\";\n        }\n    } else if (name === \"style\") {\n        // `expression()`\n        REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {\n            return \"\";\n        }\n        // `url()`\n        REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {\n            REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n            if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n                return \"\";\n            }\n        }\n        if (cssFilter !== false) {\n            cssFilter = cssFilter || defaultCSSFilter;\n            value = cssFilter.process(value);\n        }\n    }\n    // escape `<>\"` before returns\n    value = escapeAttrValue(value);\n    return value;\n}\n// RegExp list\nvar REGEXP_LT = /</g;\nvar REGEXP_GT = />/g;\nvar REGEXP_QUOTE = /\"/g;\nvar REGEXP_QUOTE_2 = /&quot;/g;\nvar REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;\nvar REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;\nvar REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\\/\\*|\\*\\//gm;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\\s*a\\s*v\\s*a|v\\s*b|l\\s*i\\s*v\\s*e)\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*|m\\s*o\\s*c\\s*h\\s*a):/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:\\s*image\\//gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n\\s*\\(.*/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\\s*r\\s*l\\s*\\(.*/gi;\n/**\n * escape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function escapeQuote(str) {\n    return str.replace(REGEXP_QUOTE, \"&quot;\");\n}\n/**\n * unescape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function unescapeQuote(str) {\n    return str.replace(REGEXP_QUOTE_2, '\"');\n}\n/**\n * escape html entities\n *\n * @param {String} str\n * @return {String}\n */ function escapeHtmlEntities(str) {\n    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {\n        return code[0] === \"x\" || code[0] === \"X\" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));\n    });\n}\n/**\n * escape html5 new danger entities\n *\n * @param {String} str\n * @return {String}\n */ function escapeDangerHtml5Entities(str) {\n    return str.replace(REGEXP_ATTR_VALUE_COLON, \":\").replace(REGEXP_ATTR_VALUE_NEWLINE, \" \");\n}\n/**\n * clear nonprintable characters\n *\n * @param {String} str\n * @return {String}\n */ function clearNonPrintableCharacter(str) {\n    var str2 = \"\";\n    for(var i = 0, len = str.length; i < len; i++){\n        str2 += str.charCodeAt(i) < 32 ? \" \" : str.charAt(i);\n    }\n    return _.trim(str2);\n}\n/**\n * get friendly attribute value\n *\n * @param {String} str\n * @return {String}\n */ function friendlyAttrValue(str) {\n    str = unescapeQuote(str);\n    str = escapeHtmlEntities(str);\n    str = escapeDangerHtml5Entities(str);\n    str = clearNonPrintableCharacter(str);\n    return str;\n}\n/**\n * unescape attribute value\n *\n * @param {String} str\n * @return {String}\n */ function escapeAttrValue(str) {\n    str = escapeQuote(str);\n    str = escapeHtml(str);\n    return str;\n}\n/**\n * `onIgnoreTag` function for removing all the tags that are not in whitelist\n */ function onIgnoreTagStripAll() {\n    return \"\";\n}\n/**\n * remove tag body\n * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)\n *\n * @param {array} tags\n * @param {function} next\n */ function StripTagBody(tags, next) {\n    if (typeof next !== \"function\") {\n        next = function() {};\n    }\n    var isRemoveAllTag = !Array.isArray(tags);\n    function isRemoveTag(tag) {\n        if (isRemoveAllTag) return true;\n        return _.indexOf(tags, tag) !== -1;\n    }\n    var removeList = [];\n    var posStart = false;\n    return {\n        onIgnoreTag: function(tag, html, options) {\n            if (isRemoveTag(tag)) {\n                if (options.isClosing) {\n                    var ret = \"[/removed]\";\n                    var end = options.position + ret.length;\n                    removeList.push([\n                        posStart !== false ? posStart : options.position,\n                        end\n                    ]);\n                    posStart = false;\n                    return ret;\n                } else {\n                    if (!posStart) {\n                        posStart = options.position;\n                    }\n                    return \"[removed]\";\n                }\n            } else {\n                return next(tag, html, options);\n            }\n        },\n        remove: function(html) {\n            var rethtml = \"\";\n            var lastPos = 0;\n            _.forEach(removeList, function(pos) {\n                rethtml += html.slice(lastPos, pos[0]);\n                lastPos = pos[1];\n            });\n            rethtml += html.slice(lastPos);\n            return rethtml;\n        }\n    };\n}\n/**\n * remove html comments\n *\n * @param {String} html\n * @return {String}\n */ function stripCommentTag(html) {\n    var retHtml = \"\";\n    var lastPos = 0;\n    while(lastPos < html.length){\n        var i = html.indexOf(\"<!--\", lastPos);\n        if (i === -1) {\n            retHtml += html.slice(lastPos);\n            break;\n        }\n        retHtml += html.slice(lastPos, i);\n        var j = html.indexOf(\"-->\", i);\n        if (j === -1) {\n            break;\n        }\n        lastPos = j + 3;\n    }\n    return retHtml;\n}\n/**\n * remove invisible characters\n *\n * @param {String} html\n * @return {String}\n */ function stripBlankChar(html) {\n    var chars = html.split(\"\");\n    chars = chars.filter(function(char) {\n        var c = char.charCodeAt(0);\n        if (c === 127) return false;\n        if (c <= 31) {\n            if (c === 10 || c === 13) return true;\n            return false;\n        }\n        return true;\n    });\n    return chars.join(\"\");\n}\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onTag = onTag;\nexports.onIgnoreTag = onIgnoreTag;\nexports.onTagAttr = onTagAttr;\nexports.onIgnoreTagAttr = onIgnoreTagAttr;\nexports.safeAttrValue = safeAttrValue;\nexports.escapeHtml = escapeHtml;\nexports.escapeQuote = escapeQuote;\nexports.unescapeQuote = unescapeQuote;\nexports.escapeHtmlEntities = escapeHtmlEntities;\nexports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;\nexports.clearNonPrintableCharacter = clearNonPrintableCharacter;\nexports.friendlyAttrValue = friendlyAttrValue;\nexports.escapeAttrValue = escapeAttrValue;\nexports.onIgnoreTagStripAll = onIgnoreTagStripAll;\nexports.StripTagBody = StripTagBody;\nexports.stripCommentTag = stripCommentTag;\nexports.stripBlankChar = stripBlankChar;\nexports.attributeWrapSign = '\"';\nexports.cssFilter = defaultCSSFilter;\nexports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xss/lib/default.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xss/lib/default.js":
/*!*****************************************!*\
  !*** ./node_modules/xss/lib/default.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * default settings\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var FilterCSS = (__webpack_require__(/*! cssfilter */ \"(rsc)/./node_modules/cssfilter/lib/index.js\").FilterCSS);\nvar getDefaultCSSWhiteList = (__webpack_require__(/*! cssfilter */ \"(rsc)/./node_modules/cssfilter/lib/index.js\").getDefaultWhiteList);\nvar _ = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/xss/lib/util.js\");\nfunction getDefaultWhiteList() {\n    return {\n        a: [\n            \"target\",\n            \"href\",\n            \"title\"\n        ],\n        abbr: [\n            \"title\"\n        ],\n        address: [],\n        area: [\n            \"shape\",\n            \"coords\",\n            \"href\",\n            \"alt\"\n        ],\n        article: [],\n        aside: [],\n        audio: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"preload\",\n            \"src\"\n        ],\n        b: [],\n        bdi: [\n            \"dir\"\n        ],\n        bdo: [\n            \"dir\"\n        ],\n        big: [],\n        blockquote: [\n            \"cite\"\n        ],\n        br: [],\n        caption: [],\n        center: [],\n        cite: [],\n        code: [],\n        col: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        colgroup: [\n            \"align\",\n            \"valign\",\n            \"span\",\n            \"width\"\n        ],\n        dd: [],\n        del: [\n            \"datetime\"\n        ],\n        details: [\n            \"open\"\n        ],\n        div: [],\n        dl: [],\n        dt: [],\n        em: [],\n        figcaption: [],\n        figure: [],\n        font: [\n            \"color\",\n            \"size\",\n            \"face\"\n        ],\n        footer: [],\n        h1: [],\n        h2: [],\n        h3: [],\n        h4: [],\n        h5: [],\n        h6: [],\n        header: [],\n        hr: [],\n        i: [],\n        img: [\n            \"src\",\n            \"alt\",\n            \"title\",\n            \"width\",\n            \"height\",\n            \"loading\"\n        ],\n        ins: [\n            \"datetime\"\n        ],\n        kbd: [],\n        li: [],\n        mark: [],\n        nav: [],\n        ol: [],\n        p: [],\n        pre: [],\n        s: [],\n        section: [],\n        small: [],\n        span: [],\n        sub: [],\n        summary: [],\n        sup: [],\n        strong: [],\n        strike: [],\n        table: [\n            \"width\",\n            \"border\",\n            \"align\",\n            \"valign\"\n        ],\n        tbody: [\n            \"align\",\n            \"valign\"\n        ],\n        td: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tfoot: [\n            \"align\",\n            \"valign\"\n        ],\n        th: [\n            \"width\",\n            \"rowspan\",\n            \"colspan\",\n            \"align\",\n            \"valign\"\n        ],\n        thead: [\n            \"align\",\n            \"valign\"\n        ],\n        tr: [\n            \"rowspan\",\n            \"align\",\n            \"valign\"\n        ],\n        tt: [],\n        u: [],\n        ul: [],\n        video: [\n            \"autoplay\",\n            \"controls\",\n            \"crossorigin\",\n            \"loop\",\n            \"muted\",\n            \"playsinline\",\n            \"poster\",\n            \"preload\",\n            \"src\",\n            \"height\",\n            \"width\"\n        ]\n    };\n}\nvar defaultCSSFilter = new FilterCSS();\n/**\n * default onTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function onTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onIgnoreTag function\n *\n * @param {String} tag\n * @param {String} html\n * @param {Object} options\n * @return {String}\n */ function onIgnoreTag(tag, html, options) {\n// do nothing\n}\n/**\n * default onTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function onTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default onIgnoreTagAttr function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @return {String}\n */ function onIgnoreTagAttr(tag, name, value) {\n// do nothing\n}\n/**\n * default escapeHtml function\n *\n * @param {String} html\n */ function escapeHtml(html) {\n    return html.replace(REGEXP_LT, \"&lt;\").replace(REGEXP_GT, \"&gt;\");\n}\n/**\n * default safeAttrValue function\n *\n * @param {String} tag\n * @param {String} name\n * @param {String} value\n * @param {Object} cssFilter\n * @return {String}\n */ function safeAttrValue(tag, name, value, cssFilter) {\n    // unescape attribute value firstly\n    value = friendlyAttrValue(value);\n    if (name === \"href\" || name === \"src\") {\n        // filter `href` and `src` attribute\n        // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`\n        value = _.trim(value);\n        if (value === \"#\") return \"#\";\n        if (!(value.substr(0, 7) === \"http://\" || value.substr(0, 8) === \"https://\" || value.substr(0, 7) === \"mailto:\" || value.substr(0, 4) === \"tel:\" || value.substr(0, 11) === \"data:image/\" || value.substr(0, 6) === \"ftp://\" || value.substr(0, 2) === \"./\" || value.substr(0, 3) === \"../\" || value[0] === \"#\" || value[0] === \"/\")) {\n            return \"\";\n        }\n    } else if (name === \"background\") {\n        // filter `background` attribute (maybe no use)\n        // `javascript:`\n        REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n            return \"\";\n        }\n    } else if (name === \"style\") {\n        // `expression()`\n        REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {\n            return \"\";\n        }\n        // `url()`\n        REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;\n        if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {\n            REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;\n            if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {\n                return \"\";\n            }\n        }\n        if (cssFilter !== false) {\n            cssFilter = cssFilter || defaultCSSFilter;\n            value = cssFilter.process(value);\n        }\n    }\n    // escape `<>\"` before returns\n    value = escapeAttrValue(value);\n    return value;\n}\n// RegExp list\nvar REGEXP_LT = /</g;\nvar REGEXP_GT = />/g;\nvar REGEXP_QUOTE = /\"/g;\nvar REGEXP_QUOTE_2 = /&quot;/g;\nvar REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;\nvar REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;\nvar REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\\/\\*|\\*\\//gm;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\\s*a\\s*v\\s*a|v\\s*b|l\\s*i\\s*v\\s*e)\\s*s\\s*c\\s*r\\s*i\\s*p\\s*t\\s*|m\\s*o\\s*c\\s*h\\s*a):/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:/gi;\n// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\\s\"'`]*(d\\s*a\\s*t\\s*a\\s*)\\:\\s*image\\//gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\\s*x\\s*p\\s*r\\s*e\\s*s\\s*s\\s*i\\s*o\\s*n\\s*\\(.*/gi;\nvar REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\\s*r\\s*l\\s*\\(.*/gi;\n/**\n * escape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function escapeQuote(str) {\n    return str.replace(REGEXP_QUOTE, \"&quot;\");\n}\n/**\n * unescape double quote\n *\n * @param {String} str\n * @return {String} str\n */ function unescapeQuote(str) {\n    return str.replace(REGEXP_QUOTE_2, '\"');\n}\n/**\n * escape html entities\n *\n * @param {String} str\n * @return {String}\n */ function escapeHtmlEntities(str) {\n    return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {\n        return code[0] === \"x\" || code[0] === \"X\" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));\n    });\n}\n/**\n * escape html5 new danger entities\n *\n * @param {String} str\n * @return {String}\n */ function escapeDangerHtml5Entities(str) {\n    return str.replace(REGEXP_ATTR_VALUE_COLON, \":\").replace(REGEXP_ATTR_VALUE_NEWLINE, \" \");\n}\n/**\n * clear nonprintable characters\n *\n * @param {String} str\n * @return {String}\n */ function clearNonPrintableCharacter(str) {\n    var str2 = \"\";\n    for(var i = 0, len = str.length; i < len; i++){\n        str2 += str.charCodeAt(i) < 32 ? \" \" : str.charAt(i);\n    }\n    return _.trim(str2);\n}\n/**\n * get friendly attribute value\n *\n * @param {String} str\n * @return {String}\n */ function friendlyAttrValue(str) {\n    str = unescapeQuote(str);\n    str = escapeHtmlEntities(str);\n    str = escapeDangerHtml5Entities(str);\n    str = clearNonPrintableCharacter(str);\n    return str;\n}\n/**\n * unescape attribute value\n *\n * @param {String} str\n * @return {String}\n */ function escapeAttrValue(str) {\n    str = escapeQuote(str);\n    str = escapeHtml(str);\n    return str;\n}\n/**\n * `onIgnoreTag` function for removing all the tags that are not in whitelist\n */ function onIgnoreTagStripAll() {\n    return \"\";\n}\n/**\n * remove tag body\n * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)\n *\n * @param {array} tags\n * @param {function} next\n */ function StripTagBody(tags, next) {\n    if (typeof next !== \"function\") {\n        next = function() {};\n    }\n    var isRemoveAllTag = !Array.isArray(tags);\n    function isRemoveTag(tag) {\n        if (isRemoveAllTag) return true;\n        return _.indexOf(tags, tag) !== -1;\n    }\n    var removeList = [];\n    var posStart = false;\n    return {\n        onIgnoreTag: function(tag, html, options) {\n            if (isRemoveTag(tag)) {\n                if (options.isClosing) {\n                    var ret = \"[/removed]\";\n                    var end = options.position + ret.length;\n                    removeList.push([\n                        posStart !== false ? posStart : options.position,\n                        end\n                    ]);\n                    posStart = false;\n                    return ret;\n                } else {\n                    if (!posStart) {\n                        posStart = options.position;\n                    }\n                    return \"[removed]\";\n                }\n            } else {\n                return next(tag, html, options);\n            }\n        },\n        remove: function(html) {\n            var rethtml = \"\";\n            var lastPos = 0;\n            _.forEach(removeList, function(pos) {\n                rethtml += html.slice(lastPos, pos[0]);\n                lastPos = pos[1];\n            });\n            rethtml += html.slice(lastPos);\n            return rethtml;\n        }\n    };\n}\n/**\n * remove html comments\n *\n * @param {String} html\n * @return {String}\n */ function stripCommentTag(html) {\n    var retHtml = \"\";\n    var lastPos = 0;\n    while(lastPos < html.length){\n        var i = html.indexOf(\"<!--\", lastPos);\n        if (i === -1) {\n            retHtml += html.slice(lastPos);\n            break;\n        }\n        retHtml += html.slice(lastPos, i);\n        var j = html.indexOf(\"-->\", i);\n        if (j === -1) {\n            break;\n        }\n        lastPos = j + 3;\n    }\n    return retHtml;\n}\n/**\n * remove invisible characters\n *\n * @param {String} html\n * @return {String}\n */ function stripBlankChar(html) {\n    var chars = html.split(\"\");\n    chars = chars.filter(function(char) {\n        var c = char.charCodeAt(0);\n        if (c === 127) return false;\n        if (c <= 31) {\n            if (c === 10 || c === 13) return true;\n            return false;\n        }\n        return true;\n    });\n    return chars.join(\"\");\n}\nexports.whiteList = getDefaultWhiteList();\nexports.getDefaultWhiteList = getDefaultWhiteList;\nexports.onTag = onTag;\nexports.onIgnoreTag = onIgnoreTag;\nexports.onTagAttr = onTagAttr;\nexports.onIgnoreTagAttr = onIgnoreTagAttr;\nexports.safeAttrValue = safeAttrValue;\nexports.escapeHtml = escapeHtml;\nexports.escapeQuote = escapeQuote;\nexports.unescapeQuote = unescapeQuote;\nexports.escapeHtmlEntities = escapeHtmlEntities;\nexports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;\nexports.clearNonPrintableCharacter = clearNonPrintableCharacter;\nexports.friendlyAttrValue = friendlyAttrValue;\nexports.escapeAttrValue = escapeAttrValue;\nexports.onIgnoreTagStripAll = onIgnoreTagStripAll;\nexports.StripTagBody = StripTagBody;\nexports.stripCommentTag = stripCommentTag;\nexports.stripBlankChar = stripBlankChar;\nexports.attributeWrapSign = '\"';\nexports.cssFilter = defaultCSSFilter;\nexports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xss/lib/default.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xss/lib/index.js":
/*!***************************************!*\
  !*** ./node_modules/xss/lib/index.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar DEFAULT = __webpack_require__(/*! ./default */ \"(action-browser)/./node_modules/xss/lib/default.js\");\nvar parser = __webpack_require__(/*! ./parser */ \"(action-browser)/./node_modules/xss/lib/parser.js\");\nvar FilterXSS = __webpack_require__(/*! ./xss */ \"(action-browser)/./node_modules/xss/lib/xss.js\");\n/**\n * filter xss function\n *\n * @param {String} html\n * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }\n * @return {String}\n */ function filterXSS(html, options) {\n    var xss = new FilterXSS(options);\n    return xss.process(html);\n}\nexports = module.exports = filterXSS;\nexports.filterXSS = filterXSS;\nexports.FilterXSS = FilterXSS;\n(function() {\n    for(var i in DEFAULT){\n        exports[i] = DEFAULT[i];\n    }\n    for(var j in parser){\n        exports[j] = parser[j];\n    }\n})();\n// using `xss` on the browser, output `filterXSS` to the globals\nif (false) {}\n// using `xss` on the WebWorker, output `filterXSS` to the globals\nfunction isWorkerEnv() {\n    return typeof self !== \"undefined\" && typeof DedicatedWorkerGlobalScope !== \"undefined\" && self instanceof DedicatedWorkerGlobalScope;\n}\nif (isWorkerEnv()) {\n    self.filterXSS = module.exports;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94c3MvbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBOzs7O0NBSUM7QUFFRCxJQUFJQSxVQUFVQyxtQkFBT0EsQ0FBQyxxRUFBVztBQUNqQyxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxtRUFBVTtBQUMvQixJQUFJRSxZQUFZRixtQkFBT0EsQ0FBQyw2REFBTztBQUUvQjs7Ozs7O0NBTUMsR0FDRCxTQUFTRyxVQUFVQyxJQUFJLEVBQUVDLE9BQU87SUFDOUIsSUFBSUMsTUFBTSxJQUFJSixVQUFVRztJQUN4QixPQUFPQyxJQUFJQyxPQUFPLENBQUNIO0FBQ3JCO0FBRUFJLFVBQVVDLE9BQU9ELE9BQU8sR0FBR0w7QUFDM0JLLGlCQUFpQixHQUFHTDtBQUNwQkssaUJBQWlCLEdBQUdOO0FBRW5CO0lBQ0MsSUFBSyxJQUFJUSxLQUFLWCxRQUFTO1FBQ3JCUyxPQUFPLENBQUNFLEVBQUUsR0FBR1gsT0FBTyxDQUFDVyxFQUFFO0lBQ3pCO0lBQ0EsSUFBSyxJQUFJQyxLQUFLVixPQUFRO1FBQ3BCTyxPQUFPLENBQUNHLEVBQUUsR0FBR1YsTUFBTSxDQUFDVSxFQUFFO0lBQ3hCO0FBQ0Y7QUFFQSxnRUFBZ0U7QUFDaEUsSUFBSSxLQUE2QixFQUFFLEVBRWxDO0FBRUQsa0VBQWtFO0FBQ2xFLFNBQVNFO0lBQ1AsT0FDRSxPQUFPQyxTQUFTLGVBQ2hCLE9BQU9DLCtCQUErQixlQUN0Q0QsZ0JBQWdCQztBQUVwQjtBQUNBLElBQUlGLGVBQWU7SUFDakJDLEtBQUtYLFNBQVMsR0FBR00sT0FBT0QsT0FBTztBQUNqQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZXMvLi9ub2RlX21vZHVsZXMveHNzL2xpYi9pbmRleC5qcz82OWZhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogeHNzXG4gKlxuICogQGF1dGhvciBab25nbWluIExlaTxsZWl6b25nbWluQGdtYWlsLmNvbT5cbiAqL1xuXG52YXIgREVGQVVMVCA9IHJlcXVpcmUoXCIuL2RlZmF1bHRcIik7XG52YXIgcGFyc2VyID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xudmFyIEZpbHRlclhTUyA9IHJlcXVpcmUoXCIuL3hzc1wiKTtcblxuLyoqXG4gKiBmaWx0ZXIgeHNzIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGh0bWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHsgd2hpdGVMaXN0LCBvblRhZywgb25UYWdBdHRyLCBvbklnbm9yZVRhZywgb25JZ25vcmVUYWdBdHRyLCBzYWZlQXR0clZhbHVlLCBlc2NhcGVIdG1sIH1cbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmlsdGVyWFNTKGh0bWwsIG9wdGlvbnMpIHtcbiAgdmFyIHhzcyA9IG5ldyBGaWx0ZXJYU1Mob3B0aW9ucyk7XG4gIHJldHVybiB4c3MucHJvY2VzcyhodG1sKTtcbn1cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZmlsdGVyWFNTO1xuZXhwb3J0cy5maWx0ZXJYU1MgPSBmaWx0ZXJYU1M7XG5leHBvcnRzLkZpbHRlclhTUyA9IEZpbHRlclhTUztcblxuKGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgaSBpbiBERUZBVUxUKSB7XG4gICAgZXhwb3J0c1tpXSA9IERFRkFVTFRbaV07XG4gIH1cbiAgZm9yICh2YXIgaiBpbiBwYXJzZXIpIHtcbiAgICBleHBvcnRzW2pdID0gcGFyc2VyW2pdO1xuICB9XG59KSgpO1xuXG4vLyB1c2luZyBgeHNzYCBvbiB0aGUgYnJvd3Nlciwgb3V0cHV0IGBmaWx0ZXJYU1NgIHRvIHRoZSBnbG9iYWxzXG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICB3aW5kb3cuZmlsdGVyWFNTID0gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIHVzaW5nIGB4c3NgIG9uIHRoZSBXZWJXb3JrZXIsIG91dHB1dCBgZmlsdGVyWFNTYCB0byB0aGUgZ2xvYmFsc1xuZnVuY3Rpb24gaXNXb3JrZXJFbnYoKSB7XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICB0eXBlb2YgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGUgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICBzZWxmIGluc3RhbmNlb2YgRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGVcbiAgKTtcbn1cbmlmIChpc1dvcmtlckVudigpKSB7XG4gIHNlbGYuZmlsdGVyWFNTID0gbW9kdWxlLmV4cG9ydHM7XG59XG4iXSwibmFtZXMiOlsiREVGQVVMVCIsInJlcXVpcmUiLCJwYXJzZXIiLCJGaWx0ZXJYU1MiLCJmaWx0ZXJYU1MiLCJodG1sIiwib3B0aW9ucyIsInhzcyIsInByb2Nlc3MiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImoiLCJ3aW5kb3ciLCJpc1dvcmtlckVudiIsInNlbGYiLCJEZWRpY2F0ZWRXb3JrZXJHbG9iYWxTY29wZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xss/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xss/lib/index.js":
/*!***************************************!*\
  !*** ./node_modules/xss/lib/index.js ***!
  \***************************************/
/***/ ((module, exports, __webpack_require__) => {

"use strict";
eval("/**\n * xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar DEFAULT = __webpack_require__(/*! ./default */ \"(rsc)/./node_modules/xss/lib/default.js\");\nvar parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/xss/lib/parser.js\");\nvar FilterXSS = __webpack_require__(/*! ./xss */ \"(rsc)/./node_modules/xss/lib/xss.js\");\n/**\n * filter xss function\n *\n * @param {String} html\n * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }\n * @return {String}\n */ function filterXSS(html, options) {\n    var xss = new FilterXSS(options);\n    return xss.process(html);\n}\nexports = module.exports = filterXSS;\nexports.filterXSS = filterXSS;\nexports.FilterXSS = FilterXSS;\n(function() {\n    for(var i in DEFAULT){\n        exports[i] = DEFAULT[i];\n    }\n    for(var j in parser){\n        exports[j] = parser[j];\n    }\n})();\n// using `xss` on the browser, output `filterXSS` to the globals\nif (false) {}\n// using `xss` on the WebWorker, output `filterXSS` to the globals\nfunction isWorkerEnv() {\n    return typeof self !== \"undefined\" && typeof DedicatedWorkerGlobalScope !== \"undefined\" && self instanceof DedicatedWorkerGlobalScope;\n}\nif (isWorkerEnv()) {\n    self.filterXSS = module.exports;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveHNzL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7OztDQUlDO0FBRUQsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUMsMERBQVc7QUFDakMsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUMsd0RBQVU7QUFDL0IsSUFBSUUsWUFBWUYsbUJBQU9BLENBQUMsa0RBQU87QUFFL0I7Ozs7OztDQU1DLEdBQ0QsU0FBU0csVUFBVUMsSUFBSSxFQUFFQyxPQUFPO0lBQzlCLElBQUlDLE1BQU0sSUFBSUosVUFBVUc7SUFDeEIsT0FBT0MsSUFBSUMsT0FBTyxDQUFDSDtBQUNyQjtBQUVBSSxVQUFVQyxPQUFPRCxPQUFPLEdBQUdMO0FBQzNCSyxpQkFBaUIsR0FBR0w7QUFDcEJLLGlCQUFpQixHQUFHTjtBQUVuQjtJQUNDLElBQUssSUFBSVEsS0FBS1gsUUFBUztRQUNyQlMsT0FBTyxDQUFDRSxFQUFFLEdBQUdYLE9BQU8sQ0FBQ1csRUFBRTtJQUN6QjtJQUNBLElBQUssSUFBSUMsS0FBS1YsT0FBUTtRQUNwQk8sT0FBTyxDQUFDRyxFQUFFLEdBQUdWLE1BQU0sQ0FBQ1UsRUFBRTtJQUN4QjtBQUNGO0FBRUEsZ0VBQWdFO0FBQ2hFLElBQUksS0FBNkIsRUFBRSxFQUVsQztBQUVELGtFQUFrRTtBQUNsRSxTQUFTRTtJQUNQLE9BQ0UsT0FBT0MsU0FBUyxlQUNoQixPQUFPQywrQkFBK0IsZUFDdENELGdCQUFnQkM7QUFFcEI7QUFDQSxJQUFJRixlQUFlO0lBQ2pCQyxLQUFLWCxTQUFTLEdBQUdNLE9BQU9ELE9BQU87QUFDakMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb29kaWVzLy4vbm9kZV9tb2R1bGVzL3hzcy9saWIvaW5kZXguanM/NjlmYSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHhzc1xuICpcbiAqIEBhdXRob3IgWm9uZ21pbiBMZWk8bGVpem9uZ21pbkBnbWFpbC5jb20+XG4gKi9cblxudmFyIERFRkFVTFQgPSByZXF1aXJlKFwiLi9kZWZhdWx0XCIpO1xudmFyIHBhcnNlciA9IHJlcXVpcmUoXCIuL3BhcnNlclwiKTtcbnZhciBGaWx0ZXJYU1MgPSByZXF1aXJlKFwiLi94c3NcIik7XG5cbi8qKlxuICogZmlsdGVyIHhzcyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBodG1sXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB7IHdoaXRlTGlzdCwgb25UYWcsIG9uVGFnQXR0ciwgb25JZ25vcmVUYWcsIG9uSWdub3JlVGFnQXR0ciwgc2FmZUF0dHJWYWx1ZSwgZXNjYXBlSHRtbCB9XG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZpbHRlclhTUyhodG1sLCBvcHRpb25zKSB7XG4gIHZhciB4c3MgPSBuZXcgRmlsdGVyWFNTKG9wdGlvbnMpO1xuICByZXR1cm4geHNzLnByb2Nlc3MoaHRtbCk7XG59XG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZpbHRlclhTUztcbmV4cG9ydHMuZmlsdGVyWFNTID0gZmlsdGVyWFNTO1xuZXhwb3J0cy5GaWx0ZXJYU1MgPSBGaWx0ZXJYU1M7XG5cbihmdW5jdGlvbiAoKSB7XG4gIGZvciAodmFyIGkgaW4gREVGQVVMVCkge1xuICAgIGV4cG9ydHNbaV0gPSBERUZBVUxUW2ldO1xuICB9XG4gIGZvciAodmFyIGogaW4gcGFyc2VyKSB7XG4gICAgZXhwb3J0c1tqXSA9IHBhcnNlcltqXTtcbiAgfVxufSkoKTtcblxuLy8gdXNpbmcgYHhzc2Agb24gdGhlIGJyb3dzZXIsIG91dHB1dCBgZmlsdGVyWFNTYCB0byB0aGUgZ2xvYmFsc1xuaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgd2luZG93LmZpbHRlclhTUyA9IG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyB1c2luZyBgeHNzYCBvbiB0aGUgV2ViV29ya2VyLCBvdXRwdXQgYGZpbHRlclhTU2AgdG8gdGhlIGdsb2JhbHNcbmZ1bmN0aW9uIGlzV29ya2VyRW52KCkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgdHlwZW9mIERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgc2VsZiBpbnN0YW5jZW9mIERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlXG4gICk7XG59XG5pZiAoaXNXb3JrZXJFbnYoKSkge1xuICBzZWxmLmZpbHRlclhTUyA9IG1vZHVsZS5leHBvcnRzO1xufVxuIl0sIm5hbWVzIjpbIkRFRkFVTFQiLCJyZXF1aXJlIiwicGFyc2VyIiwiRmlsdGVyWFNTIiwiZmlsdGVyWFNTIiwiaHRtbCIsIm9wdGlvbnMiLCJ4c3MiLCJwcm9jZXNzIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJqIiwid2luZG93IiwiaXNXb3JrZXJFbnYiLCJzZWxmIiwiRGVkaWNhdGVkV29ya2VyR2xvYmFsU2NvcGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xss/lib/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xss/lib/parser.js":
/*!****************************************!*\
  !*** ./node_modules/xss/lib/parser.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Simple HTML Parser\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var _ = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/xss/lib/util.js\");\n/**\n * get tag name\n *\n * @param {String} html e.g. '<a hef=\"#\">'\n * @return {String}\n */ function getTagName(html) {\n    var i = _.spaceIndex(html);\n    var tagName;\n    if (i === -1) {\n        tagName = html.slice(1, -1);\n    } else {\n        tagName = html.slice(1, i + 1);\n    }\n    tagName = _.trim(tagName).toLowerCase();\n    if (tagName.slice(0, 1) === \"/\") tagName = tagName.slice(1);\n    if (tagName.slice(-1) === \"/\") tagName = tagName.slice(0, -1);\n    return tagName;\n}\n/**\n * is close tag?\n *\n * @param {String} html 如：'<a hef=\"#\">'\n * @return {Boolean}\n */ function isClosing(html) {\n    return html.slice(0, 2) === \"</\";\n}\n/**\n * parse input html and returns processed html\n *\n * @param {String} html\n * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)\n * @param {Function} escapeHtml\n * @return {String}\n */ function parseTag(html, onTag, escapeHtml) {\n    \"use strict\";\n    var rethtml = \"\";\n    var lastPos = 0;\n    var tagStart = false;\n    var quoteStart = false;\n    var currentPos = 0;\n    var len = html.length;\n    var currentTagName = \"\";\n    var currentHtml = \"\";\n    chariterator: for(currentPos = 0; currentPos < len; currentPos++){\n        var c = html.charAt(currentPos);\n        if (tagStart === false) {\n            if (c === \"<\") {\n                tagStart = currentPos;\n                continue;\n            }\n        } else {\n            if (quoteStart === false) {\n                if (c === \"<\") {\n                    rethtml += escapeHtml(html.slice(lastPos, currentPos));\n                    tagStart = currentPos;\n                    lastPos = currentPos;\n                    continue;\n                }\n                if (c === \">\" || currentPos === len - 1) {\n                    rethtml += escapeHtml(html.slice(lastPos, tagStart));\n                    currentHtml = html.slice(tagStart, currentPos + 1);\n                    currentTagName = getTagName(currentHtml);\n                    rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));\n                    lastPos = currentPos + 1;\n                    tagStart = false;\n                    continue;\n                }\n                if (c === '\"' || c === \"'\") {\n                    var i = 1;\n                    var ic = html.charAt(currentPos - i);\n                    while(ic.trim() === \"\" || ic === \"=\"){\n                        if (ic === \"=\") {\n                            quoteStart = c;\n                            continue chariterator;\n                        }\n                        ic = html.charAt(currentPos - ++i);\n                    }\n                }\n            } else {\n                if (c === quoteStart) {\n                    quoteStart = false;\n                    continue;\n                }\n            }\n        }\n    }\n    if (lastPos < len) {\n        rethtml += escapeHtml(html.substr(lastPos));\n    }\n    return rethtml;\n}\nvar REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\\\_:.-]/gim;\n/**\n * parse input attributes and returns processed attributes\n *\n * @param {String} html e.g. `href=\"#\" target=\"_blank\"`\n * @param {Function} onAttr e.g. `function (name, value)`\n * @return {String}\n */ function parseAttr(html, onAttr) {\n    \"use strict\";\n    var lastPos = 0;\n    var lastMarkPos = 0;\n    var retAttrs = [];\n    var tmpName = false;\n    var len = html.length;\n    function addAttr(name, value) {\n        name = _.trim(name);\n        name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, \"\").toLowerCase();\n        if (name.length < 1) return;\n        var ret = onAttr(name, value || \"\");\n        if (ret) retAttrs.push(ret);\n    }\n    // 逐个分析字符\n    for(var i = 0; i < len; i++){\n        var c = html.charAt(i);\n        var v, j;\n        if (tmpName === false && c === \"=\") {\n            tmpName = html.slice(lastPos, i);\n            lastPos = i + 1;\n            lastMarkPos = html.charAt(lastPos) === '\"' || html.charAt(lastPos) === \"'\" ? lastPos : findNextQuotationMark(html, i + 1);\n            continue;\n        }\n        if (tmpName !== false) {\n            if (i === lastMarkPos) {\n                j = html.indexOf(c, i + 1);\n                if (j === -1) {\n                    break;\n                } else {\n                    v = _.trim(html.slice(lastMarkPos + 1, j));\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    i = j;\n                    lastPos = i + 1;\n                    continue;\n                }\n            }\n        }\n        if (/\\s|\\n|\\t/.test(c)) {\n            html = html.replace(/\\s|\\n|\\t/g, \" \");\n            if (tmpName === false) {\n                j = findNextEqual(html, i);\n                if (j === -1) {\n                    v = _.trim(html.slice(lastPos, i));\n                    addAttr(v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else {\n                    i = j - 1;\n                    continue;\n                }\n            } else {\n                j = findBeforeEqual(html, i - 1);\n                if (j === -1) {\n                    v = _.trim(html.slice(lastPos, i));\n                    v = stripQuoteWrap(v);\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else {\n                    continue;\n                }\n            }\n        }\n    }\n    if (lastPos < html.length) {\n        if (tmpName === false) {\n            addAttr(html.slice(lastPos));\n        } else {\n            addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));\n        }\n    }\n    return _.trim(retAttrs.join(\" \"));\n}\nfunction findNextEqual(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction findNextQuotationMark(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"'\" || c === '\"') return i;\n        return -1;\n    }\n}\nfunction findBeforeEqual(str, i) {\n    for(; i > 0; i--){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction isQuoteWrapString(text) {\n    if (text[0] === '\"' && text[text.length - 1] === '\"' || text[0] === \"'\" && text[text.length - 1] === \"'\") {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction stripQuoteWrap(text) {\n    if (isQuoteWrapString(text)) {\n        return text.substr(1, text.length - 2);\n    } else {\n        return text;\n    }\n}\nexports.parseTag = parseTag;\nexports.parseAttr = parseAttr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xss/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xss/lib/parser.js":
/*!****************************************!*\
  !*** ./node_modules/xss/lib/parser.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/**\n * Simple HTML Parser\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ var _ = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/xss/lib/util.js\");\n/**\n * get tag name\n *\n * @param {String} html e.g. '<a hef=\"#\">'\n * @return {String}\n */ function getTagName(html) {\n    var i = _.spaceIndex(html);\n    var tagName;\n    if (i === -1) {\n        tagName = html.slice(1, -1);\n    } else {\n        tagName = html.slice(1, i + 1);\n    }\n    tagName = _.trim(tagName).toLowerCase();\n    if (tagName.slice(0, 1) === \"/\") tagName = tagName.slice(1);\n    if (tagName.slice(-1) === \"/\") tagName = tagName.slice(0, -1);\n    return tagName;\n}\n/**\n * is close tag?\n *\n * @param {String} html 如：'<a hef=\"#\">'\n * @return {Boolean}\n */ function isClosing(html) {\n    return html.slice(0, 2) === \"</\";\n}\n/**\n * parse input html and returns processed html\n *\n * @param {String} html\n * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)\n * @param {Function} escapeHtml\n * @return {String}\n */ function parseTag(html, onTag, escapeHtml) {\n    \"use strict\";\n    var rethtml = \"\";\n    var lastPos = 0;\n    var tagStart = false;\n    var quoteStart = false;\n    var currentPos = 0;\n    var len = html.length;\n    var currentTagName = \"\";\n    var currentHtml = \"\";\n    chariterator: for(currentPos = 0; currentPos < len; currentPos++){\n        var c = html.charAt(currentPos);\n        if (tagStart === false) {\n            if (c === \"<\") {\n                tagStart = currentPos;\n                continue;\n            }\n        } else {\n            if (quoteStart === false) {\n                if (c === \"<\") {\n                    rethtml += escapeHtml(html.slice(lastPos, currentPos));\n                    tagStart = currentPos;\n                    lastPos = currentPos;\n                    continue;\n                }\n                if (c === \">\" || currentPos === len - 1) {\n                    rethtml += escapeHtml(html.slice(lastPos, tagStart));\n                    currentHtml = html.slice(tagStart, currentPos + 1);\n                    currentTagName = getTagName(currentHtml);\n                    rethtml += onTag(tagStart, rethtml.length, currentTagName, currentHtml, isClosing(currentHtml));\n                    lastPos = currentPos + 1;\n                    tagStart = false;\n                    continue;\n                }\n                if (c === '\"' || c === \"'\") {\n                    var i = 1;\n                    var ic = html.charAt(currentPos - i);\n                    while(ic.trim() === \"\" || ic === \"=\"){\n                        if (ic === \"=\") {\n                            quoteStart = c;\n                            continue chariterator;\n                        }\n                        ic = html.charAt(currentPos - ++i);\n                    }\n                }\n            } else {\n                if (c === quoteStart) {\n                    quoteStart = false;\n                    continue;\n                }\n            }\n        }\n    }\n    if (lastPos < len) {\n        rethtml += escapeHtml(html.substr(lastPos));\n    }\n    return rethtml;\n}\nvar REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\\\_:.-]/gim;\n/**\n * parse input attributes and returns processed attributes\n *\n * @param {String} html e.g. `href=\"#\" target=\"_blank\"`\n * @param {Function} onAttr e.g. `function (name, value)`\n * @return {String}\n */ function parseAttr(html, onAttr) {\n    \"use strict\";\n    var lastPos = 0;\n    var lastMarkPos = 0;\n    var retAttrs = [];\n    var tmpName = false;\n    var len = html.length;\n    function addAttr(name, value) {\n        name = _.trim(name);\n        name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, \"\").toLowerCase();\n        if (name.length < 1) return;\n        var ret = onAttr(name, value || \"\");\n        if (ret) retAttrs.push(ret);\n    }\n    // 逐个分析字符\n    for(var i = 0; i < len; i++){\n        var c = html.charAt(i);\n        var v, j;\n        if (tmpName === false && c === \"=\") {\n            tmpName = html.slice(lastPos, i);\n            lastPos = i + 1;\n            lastMarkPos = html.charAt(lastPos) === '\"' || html.charAt(lastPos) === \"'\" ? lastPos : findNextQuotationMark(html, i + 1);\n            continue;\n        }\n        if (tmpName !== false) {\n            if (i === lastMarkPos) {\n                j = html.indexOf(c, i + 1);\n                if (j === -1) {\n                    break;\n                } else {\n                    v = _.trim(html.slice(lastMarkPos + 1, j));\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    i = j;\n                    lastPos = i + 1;\n                    continue;\n                }\n            }\n        }\n        if (/\\s|\\n|\\t/.test(c)) {\n            html = html.replace(/\\s|\\n|\\t/g, \" \");\n            if (tmpName === false) {\n                j = findNextEqual(html, i);\n                if (j === -1) {\n                    v = _.trim(html.slice(lastPos, i));\n                    addAttr(v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else {\n                    i = j - 1;\n                    continue;\n                }\n            } else {\n                j = findBeforeEqual(html, i - 1);\n                if (j === -1) {\n                    v = _.trim(html.slice(lastPos, i));\n                    v = stripQuoteWrap(v);\n                    addAttr(tmpName, v);\n                    tmpName = false;\n                    lastPos = i + 1;\n                    continue;\n                } else {\n                    continue;\n                }\n            }\n        }\n    }\n    if (lastPos < html.length) {\n        if (tmpName === false) {\n            addAttr(html.slice(lastPos));\n        } else {\n            addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));\n        }\n    }\n    return _.trim(retAttrs.join(\" \"));\n}\nfunction findNextEqual(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction findNextQuotationMark(str, i) {\n    for(; i < str.length; i++){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"'\" || c === '\"') return i;\n        return -1;\n    }\n}\nfunction findBeforeEqual(str, i) {\n    for(; i > 0; i--){\n        var c = str[i];\n        if (c === \" \") continue;\n        if (c === \"=\") return i;\n        return -1;\n    }\n}\nfunction isQuoteWrapString(text) {\n    if (text[0] === '\"' && text[text.length - 1] === '\"' || text[0] === \"'\" && text[text.length - 1] === \"'\") {\n        return true;\n    } else {\n        return false;\n    }\n}\nfunction stripQuoteWrap(text) {\n    if (isQuoteWrapString(text)) {\n        return text.substr(1, text.length - 2);\n    } else {\n        return text;\n    }\n}\nexports.parseTag = parseTag;\nexports.parseAttr = parseAttr;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xss/lib/parser.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xss/lib/util.js":
/*!**************************************!*\
  !*** ./node_modules/xss/lib/util.js ***!
  \**************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    indexOf: function(arr, item) {\n        var i, j;\n        if (Array.prototype.indexOf) {\n            return arr.indexOf(item);\n        }\n        for(i = 0, j = arr.length; i < j; i++){\n            if (arr[i] === item) {\n                return i;\n            }\n        }\n        return -1;\n    },\n    forEach: function(arr, fn, scope) {\n        var i, j;\n        if (Array.prototype.forEach) {\n            return arr.forEach(fn, scope);\n        }\n        for(i = 0, j = arr.length; i < j; i++){\n            fn.call(scope, arr[i], i, arr);\n        }\n    },\n    trim: function(str) {\n        if (String.prototype.trim) {\n            return str.trim();\n        }\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    spaceIndex: function(str) {\n        var reg = /\\s|\\n|\\t/;\n        var match = reg.exec(str);\n        return match ? match.index : -1;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy94c3MvbGliL3V0aWwuanMiLCJtYXBwaW5ncyI6IjtBQUFBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsU0FBUyxTQUFVQyxHQUFHLEVBQUVDLElBQUk7UUFDMUIsSUFBSUMsR0FBR0M7UUFDUCxJQUFJQyxNQUFNQyxTQUFTLENBQUNOLE9BQU8sRUFBRTtZQUMzQixPQUFPQyxJQUFJRCxPQUFPLENBQUNFO1FBQ3JCO1FBQ0EsSUFBS0MsSUFBSSxHQUFHQyxJQUFJSCxJQUFJTSxNQUFNLEVBQUVKLElBQUlDLEdBQUdELElBQUs7WUFDdEMsSUFBSUYsR0FBRyxDQUFDRSxFQUFFLEtBQUtELE1BQU07Z0JBQ25CLE9BQU9DO1lBQ1Q7UUFDRjtRQUNBLE9BQU8sQ0FBQztJQUNWO0lBQ0FLLFNBQVMsU0FBVVAsR0FBRyxFQUFFUSxFQUFFLEVBQUVDLEtBQUs7UUFDL0IsSUFBSVAsR0FBR0M7UUFDUCxJQUFJQyxNQUFNQyxTQUFTLENBQUNFLE9BQU8sRUFBRTtZQUMzQixPQUFPUCxJQUFJTyxPQUFPLENBQUNDLElBQUlDO1FBQ3pCO1FBQ0EsSUFBS1AsSUFBSSxHQUFHQyxJQUFJSCxJQUFJTSxNQUFNLEVBQUVKLElBQUlDLEdBQUdELElBQUs7WUFDdENNLEdBQUdFLElBQUksQ0FBQ0QsT0FBT1QsR0FBRyxDQUFDRSxFQUFFLEVBQUVBLEdBQUdGO1FBQzVCO0lBQ0Y7SUFDQVcsTUFBTSxTQUFVQyxHQUFHO1FBQ2pCLElBQUlDLE9BQU9SLFNBQVMsQ0FBQ00sSUFBSSxFQUFFO1lBQ3pCLE9BQU9DLElBQUlELElBQUk7UUFDakI7UUFDQSxPQUFPQyxJQUFJRSxPQUFPLENBQUMsa0JBQWtCO0lBQ3ZDO0lBQ0FDLFlBQVksU0FBVUgsR0FBRztRQUN2QixJQUFJSSxNQUFNO1FBQ1YsSUFBSUMsUUFBUUQsSUFBSUUsSUFBSSxDQUFDTjtRQUNyQixPQUFPSyxRQUFRQSxNQUFNRSxLQUFLLEdBQUcsQ0FBQztJQUNoQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vZGllcy8uL25vZGVfbW9kdWxlcy94c3MvbGliL3V0aWwuanM/MjMxZiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgaW5kZXhPZjogZnVuY3Rpb24gKGFyciwgaXRlbSkge1xuICAgIHZhciBpLCBqO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgcmV0dXJuIGFyci5pbmRleE9mKGl0ZW0pO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBqID0gYXJyLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgaWYgKGFycltpXSA9PT0gaXRlbSkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9LFxuICBmb3JFYWNoOiBmdW5jdGlvbiAoYXJyLCBmbiwgc2NvcGUpIHtcbiAgICB2YXIgaSwgajtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmZvckVhY2gpIHtcbiAgICAgIHJldHVybiBhcnIuZm9yRWFjaChmbiwgc2NvcGUpO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwLCBqID0gYXJyLmxlbmd0aDsgaSA8IGo7IGkrKykge1xuICAgICAgZm4uY2FsbChzY29wZSwgYXJyW2ldLCBpLCBhcnIpO1xuICAgIH1cbiAgfSxcbiAgdHJpbTogZnVuY3Rpb24gKHN0cikge1xuICAgIGlmIChTdHJpbmcucHJvdG90eXBlLnRyaW0pIHtcbiAgICAgIHJldHVybiBzdHIudHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyheXFxzKil8KFxccyokKS9nLCBcIlwiKTtcbiAgfSxcbiAgc3BhY2VJbmRleDogZnVuY3Rpb24gKHN0cikge1xuICAgIHZhciByZWcgPSAvXFxzfFxcbnxcXHQvO1xuICAgIHZhciBtYXRjaCA9IHJlZy5leGVjKHN0cik7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2guaW5kZXggOiAtMTtcbiAgfSxcbn07XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImluZGV4T2YiLCJhcnIiLCJpdGVtIiwiaSIsImoiLCJBcnJheSIsInByb3RvdHlwZSIsImxlbmd0aCIsImZvckVhY2giLCJmbiIsInNjb3BlIiwiY2FsbCIsInRyaW0iLCJzdHIiLCJTdHJpbmciLCJyZXBsYWNlIiwic3BhY2VJbmRleCIsInJlZyIsIm1hdGNoIiwiZXhlYyIsImluZGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xss/lib/util.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xss/lib/util.js":
/*!**************************************!*\
  !*** ./node_modules/xss/lib/util.js ***!
  \**************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {\n    indexOf: function(arr, item) {\n        var i, j;\n        if (Array.prototype.indexOf) {\n            return arr.indexOf(item);\n        }\n        for(i = 0, j = arr.length; i < j; i++){\n            if (arr[i] === item) {\n                return i;\n            }\n        }\n        return -1;\n    },\n    forEach: function(arr, fn, scope) {\n        var i, j;\n        if (Array.prototype.forEach) {\n            return arr.forEach(fn, scope);\n        }\n        for(i = 0, j = arr.length; i < j; i++){\n            fn.call(scope, arr[i], i, arr);\n        }\n    },\n    trim: function(str) {\n        if (String.prototype.trim) {\n            return str.trim();\n        }\n        return str.replace(/(^\\s*)|(\\s*$)/g, \"\");\n    },\n    spaceIndex: function(str) {\n        var reg = /\\s|\\n|\\t/;\n        var match = reg.exec(str);\n        return match ? match.index : -1;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveHNzL2xpYi91dGlsLmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFNBQVMsU0FBVUMsR0FBRyxFQUFFQyxJQUFJO1FBQzFCLElBQUlDLEdBQUdDO1FBQ1AsSUFBSUMsTUFBTUMsU0FBUyxDQUFDTixPQUFPLEVBQUU7WUFDM0IsT0FBT0MsSUFBSUQsT0FBTyxDQUFDRTtRQUNyQjtRQUNBLElBQUtDLElBQUksR0FBR0MsSUFBSUgsSUFBSU0sTUFBTSxFQUFFSixJQUFJQyxHQUFHRCxJQUFLO1lBQ3RDLElBQUlGLEdBQUcsQ0FBQ0UsRUFBRSxLQUFLRCxNQUFNO2dCQUNuQixPQUFPQztZQUNUO1FBQ0Y7UUFDQSxPQUFPLENBQUM7SUFDVjtJQUNBSyxTQUFTLFNBQVVQLEdBQUcsRUFBRVEsRUFBRSxFQUFFQyxLQUFLO1FBQy9CLElBQUlQLEdBQUdDO1FBQ1AsSUFBSUMsTUFBTUMsU0FBUyxDQUFDRSxPQUFPLEVBQUU7WUFDM0IsT0FBT1AsSUFBSU8sT0FBTyxDQUFDQyxJQUFJQztRQUN6QjtRQUNBLElBQUtQLElBQUksR0FBR0MsSUFBSUgsSUFBSU0sTUFBTSxFQUFFSixJQUFJQyxHQUFHRCxJQUFLO1lBQ3RDTSxHQUFHRSxJQUFJLENBQUNELE9BQU9ULEdBQUcsQ0FBQ0UsRUFBRSxFQUFFQSxHQUFHRjtRQUM1QjtJQUNGO0lBQ0FXLE1BQU0sU0FBVUMsR0FBRztRQUNqQixJQUFJQyxPQUFPUixTQUFTLENBQUNNLElBQUksRUFBRTtZQUN6QixPQUFPQyxJQUFJRCxJQUFJO1FBQ2pCO1FBQ0EsT0FBT0MsSUFBSUUsT0FBTyxDQUFDLGtCQUFrQjtJQUN2QztJQUNBQyxZQUFZLFNBQVVILEdBQUc7UUFDdkIsSUFBSUksTUFBTTtRQUNWLElBQUlDLFFBQVFELElBQUlFLElBQUksQ0FBQ047UUFDckIsT0FBT0ssUUFBUUEsTUFBTUUsS0FBSyxHQUFHLENBQUM7SUFDaEM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb2RpZXMvLi9ub2RlX21vZHVsZXMveHNzL2xpYi91dGlsLmpzPzIzMWYiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIGluZGV4T2Y6IGZ1bmN0aW9uIChhcnIsIGl0ZW0pIHtcbiAgICB2YXIgaSwgajtcbiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluZGV4T2YpIHtcbiAgICAgIHJldHVybiBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaiA9IGFyci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGlmIChhcnJbaV0gPT09IGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbiAgfSxcbiAgZm9yRWFjaDogZnVuY3Rpb24gKGFyciwgZm4sIHNjb3BlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKSB7XG4gICAgICByZXR1cm4gYXJyLmZvckVhY2goZm4sIHNjb3BlKTtcbiAgICB9XG4gICAgZm9yIChpID0gMCwgaiA9IGFyci5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGZuLmNhbGwoc2NvcGUsIGFycltpXSwgaSwgYXJyKTtcbiAgICB9XG4gIH0sXG4gIHRyaW06IGZ1bmN0aW9uIChzdHIpIHtcbiAgICBpZiAoU3RyaW5nLnByb3RvdHlwZS50cmltKSB7XG4gICAgICByZXR1cm4gc3RyLnRyaW0oKTtcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXlxccyopfChcXHMqJCkvZywgXCJcIik7XG4gIH0sXG4gIHNwYWNlSW5kZXg6IGZ1bmN0aW9uIChzdHIpIHtcbiAgICB2YXIgcmVnID0gL1xcc3xcXG58XFx0LztcbiAgICB2YXIgbWF0Y2ggPSByZWcuZXhlYyhzdHIpO1xuICAgIHJldHVybiBtYXRjaCA/IG1hdGNoLmluZGV4IDogLTE7XG4gIH0sXG59O1xuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbmRleE9mIiwiYXJyIiwiaXRlbSIsImkiLCJqIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJsZW5ndGgiLCJmb3JFYWNoIiwiZm4iLCJzY29wZSIsImNhbGwiLCJ0cmltIiwic3RyIiwiU3RyaW5nIiwicmVwbGFjZSIsInNwYWNlSW5kZXgiLCJyZWciLCJtYXRjaCIsImV4ZWMiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xss/lib/util.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/xss/lib/xss.js":
/*!*************************************!*\
  !*** ./node_modules/xss/lib/xss.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar FilterCSS = (__webpack_require__(/*! cssfilter */ \"(action-browser)/./node_modules/cssfilter/lib/index.js\").FilterCSS);\nvar DEFAULT = __webpack_require__(/*! ./default */ \"(action-browser)/./node_modules/xss/lib/default.js\");\nvar parser = __webpack_require__(/*! ./parser */ \"(action-browser)/./node_modules/xss/lib/parser.js\");\nvar parseTag = parser.parseTag;\nvar parseAttr = parser.parseAttr;\nvar _ = __webpack_require__(/*! ./util */ \"(action-browser)/./node_modules/xss/lib/util.js\");\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */ function isNull(obj) {\n    return obj === undefined || obj === null;\n}\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */ function getAttrs(html) {\n    var i = _.spaceIndex(html);\n    if (i === -1) {\n        return {\n            html: \"\",\n            closing: html[html.length - 2] === \"/\"\n        };\n    }\n    html = _.trim(html.slice(i + 1, -1));\n    var isClosing = html[html.length - 1] === \"/\";\n    if (isClosing) html = _.trim(html.slice(0, -1));\n    return {\n        html: html,\n        closing: isClosing\n    };\n}\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */ function shallowCopyObject(obj) {\n    var ret = {};\n    for(var i in obj){\n        ret[i] = obj[i];\n    }\n    return ret;\n}\nfunction keysToLowerCase(obj) {\n    var ret = {};\n    for(var i in obj){\n        if (Array.isArray(obj[i])) {\n            ret[i.toLowerCase()] = obj[i].map(function(item) {\n                return item.toLowerCase();\n            });\n        } else {\n            ret[i.toLowerCase()] = obj[i];\n        }\n    }\n    return ret;\n}\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */ function FilterXSS(options) {\n    options = shallowCopyObject(options || {});\n    if (options.stripIgnoreTag) {\n        if (options.onIgnoreTag) {\n            console.error('Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time');\n        }\n        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;\n    }\n    if (options.whiteList || options.allowList) {\n        options.whiteList = keysToLowerCase(options.whiteList || options.allowList);\n    } else {\n        options.whiteList = DEFAULT.whiteList;\n    }\n    this.attributeWrapSign = options.singleQuotedAttributeValue === true ? \"'\" : DEFAULT.attributeWrapSign;\n    options.onTag = options.onTag || DEFAULT.onTag;\n    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;\n    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;\n    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;\n    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;\n    this.options = options;\n    if (options.css === false) {\n        this.cssFilter = false;\n    } else {\n        options.css = options.css || {};\n        this.cssFilter = new FilterCSS(options.css);\n    }\n}\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */ FilterXSS.prototype.process = function(html) {\n    // compatible with the input\n    html = html || \"\";\n    html = html.toString();\n    if (!html) return \"\";\n    var me = this;\n    var options = me.options;\n    var whiteList = options.whiteList;\n    var onTag = options.onTag;\n    var onIgnoreTag = options.onIgnoreTag;\n    var onTagAttr = options.onTagAttr;\n    var onIgnoreTagAttr = options.onIgnoreTagAttr;\n    var safeAttrValue = options.safeAttrValue;\n    var escapeHtml = options.escapeHtml;\n    var attributeWrapSign = me.attributeWrapSign;\n    var cssFilter = me.cssFilter;\n    // remove invisible characters\n    if (options.stripBlankChar) {\n        html = DEFAULT.stripBlankChar(html);\n    }\n    // remove html comments\n    if (!options.allowCommentTag) {\n        html = DEFAULT.stripCommentTag(html);\n    }\n    // if enable stripIgnoreTagBody\n    var stripIgnoreTagBody = false;\n    if (options.stripIgnoreTagBody) {\n        stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);\n        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n    }\n    var retHtml = parseTag(html, function(sourcePosition, position, tag, html, isClosing) {\n        var info = {\n            sourcePosition: sourcePosition,\n            position: position,\n            isClosing: isClosing,\n            isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag)\n        };\n        // call `onTag()`\n        var ret = onTag(tag, html, info);\n        if (!isNull(ret)) return ret;\n        if (info.isWhite) {\n            if (info.isClosing) {\n                return \"</\" + tag + \">\";\n            }\n            var attrs = getAttrs(html);\n            var whiteAttrList = whiteList[tag];\n            var attrsHtml = parseAttr(attrs.html, function(name, value) {\n                // call `onTagAttr()`\n                var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;\n                var ret = onTagAttr(tag, name, value, isWhiteAttr);\n                if (!isNull(ret)) return ret;\n                if (isWhiteAttr) {\n                    // call `safeAttrValue()`\n                    value = safeAttrValue(tag, name, value, cssFilter);\n                    if (value) {\n                        return name + \"=\" + attributeWrapSign + value + attributeWrapSign;\n                    } else {\n                        return name;\n                    }\n                } else {\n                    // call `onIgnoreTagAttr()`\n                    ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n                    if (!isNull(ret)) return ret;\n                    return;\n                }\n            });\n            // build new tag html\n            html = \"<\" + tag;\n            if (attrsHtml) html += \" \" + attrsHtml;\n            if (attrs.closing) html += \" /\";\n            html += \">\";\n            return html;\n        } else {\n            // call `onIgnoreTag()`\n            ret = onIgnoreTag(tag, html, info);\n            if (!isNull(ret)) return ret;\n            return escapeHtml(html);\n        }\n    }, escapeHtml);\n    // if enable stripIgnoreTagBody\n    if (stripIgnoreTagBody) {\n        retHtml = stripIgnoreTagBody.remove(retHtml);\n    }\n    return retHtml;\n};\nmodule.exports = FilterXSS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/xss/lib/xss.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/xss/lib/xss.js":
/*!*************************************!*\
  !*** ./node_modules/xss/lib/xss.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/**\n * filter xss\n *\n * @author Zongmin Lei<leizongmin@gmail.com>\n */ \nvar FilterCSS = (__webpack_require__(/*! cssfilter */ \"(rsc)/./node_modules/cssfilter/lib/index.js\").FilterCSS);\nvar DEFAULT = __webpack_require__(/*! ./default */ \"(rsc)/./node_modules/xss/lib/default.js\");\nvar parser = __webpack_require__(/*! ./parser */ \"(rsc)/./node_modules/xss/lib/parser.js\");\nvar parseTag = parser.parseTag;\nvar parseAttr = parser.parseAttr;\nvar _ = __webpack_require__(/*! ./util */ \"(rsc)/./node_modules/xss/lib/util.js\");\n/**\n * returns `true` if the input value is `undefined` or `null`\n *\n * @param {Object} obj\n * @return {Boolean}\n */ function isNull(obj) {\n    return obj === undefined || obj === null;\n}\n/**\n * get attributes for a tag\n *\n * @param {String} html\n * @return {Object}\n *   - {String} html\n *   - {Boolean} closing\n */ function getAttrs(html) {\n    var i = _.spaceIndex(html);\n    if (i === -1) {\n        return {\n            html: \"\",\n            closing: html[html.length - 2] === \"/\"\n        };\n    }\n    html = _.trim(html.slice(i + 1, -1));\n    var isClosing = html[html.length - 1] === \"/\";\n    if (isClosing) html = _.trim(html.slice(0, -1));\n    return {\n        html: html,\n        closing: isClosing\n    };\n}\n/**\n * shallow copy\n *\n * @param {Object} obj\n * @return {Object}\n */ function shallowCopyObject(obj) {\n    var ret = {};\n    for(var i in obj){\n        ret[i] = obj[i];\n    }\n    return ret;\n}\nfunction keysToLowerCase(obj) {\n    var ret = {};\n    for(var i in obj){\n        if (Array.isArray(obj[i])) {\n            ret[i.toLowerCase()] = obj[i].map(function(item) {\n                return item.toLowerCase();\n            });\n        } else {\n            ret[i.toLowerCase()] = obj[i];\n        }\n    }\n    return ret;\n}\n/**\n * FilterXSS class\n *\n * @param {Object} options\n *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,\n *        onIgnoreTagAttr, safeAttrValue, escapeHtml\n *        stripIgnoreTagBody, allowCommentTag, stripBlankChar\n *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`\n */ function FilterXSS(options) {\n    options = shallowCopyObject(options || {});\n    if (options.stripIgnoreTag) {\n        if (options.onIgnoreTag) {\n            console.error('Notes: cannot use these two options \"stripIgnoreTag\" and \"onIgnoreTag\" at the same time');\n        }\n        options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;\n    }\n    if (options.whiteList || options.allowList) {\n        options.whiteList = keysToLowerCase(options.whiteList || options.allowList);\n    } else {\n        options.whiteList = DEFAULT.whiteList;\n    }\n    this.attributeWrapSign = options.singleQuotedAttributeValue === true ? \"'\" : DEFAULT.attributeWrapSign;\n    options.onTag = options.onTag || DEFAULT.onTag;\n    options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;\n    options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;\n    options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;\n    options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;\n    options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;\n    this.options = options;\n    if (options.css === false) {\n        this.cssFilter = false;\n    } else {\n        options.css = options.css || {};\n        this.cssFilter = new FilterCSS(options.css);\n    }\n}\n/**\n * start process and returns result\n *\n * @param {String} html\n * @return {String}\n */ FilterXSS.prototype.process = function(html) {\n    // compatible with the input\n    html = html || \"\";\n    html = html.toString();\n    if (!html) return \"\";\n    var me = this;\n    var options = me.options;\n    var whiteList = options.whiteList;\n    var onTag = options.onTag;\n    var onIgnoreTag = options.onIgnoreTag;\n    var onTagAttr = options.onTagAttr;\n    var onIgnoreTagAttr = options.onIgnoreTagAttr;\n    var safeAttrValue = options.safeAttrValue;\n    var escapeHtml = options.escapeHtml;\n    var attributeWrapSign = me.attributeWrapSign;\n    var cssFilter = me.cssFilter;\n    // remove invisible characters\n    if (options.stripBlankChar) {\n        html = DEFAULT.stripBlankChar(html);\n    }\n    // remove html comments\n    if (!options.allowCommentTag) {\n        html = DEFAULT.stripCommentTag(html);\n    }\n    // if enable stripIgnoreTagBody\n    var stripIgnoreTagBody = false;\n    if (options.stripIgnoreTagBody) {\n        stripIgnoreTagBody = DEFAULT.StripTagBody(options.stripIgnoreTagBody, onIgnoreTag);\n        onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;\n    }\n    var retHtml = parseTag(html, function(sourcePosition, position, tag, html, isClosing) {\n        var info = {\n            sourcePosition: sourcePosition,\n            position: position,\n            isClosing: isClosing,\n            isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag)\n        };\n        // call `onTag()`\n        var ret = onTag(tag, html, info);\n        if (!isNull(ret)) return ret;\n        if (info.isWhite) {\n            if (info.isClosing) {\n                return \"</\" + tag + \">\";\n            }\n            var attrs = getAttrs(html);\n            var whiteAttrList = whiteList[tag];\n            var attrsHtml = parseAttr(attrs.html, function(name, value) {\n                // call `onTagAttr()`\n                var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;\n                var ret = onTagAttr(tag, name, value, isWhiteAttr);\n                if (!isNull(ret)) return ret;\n                if (isWhiteAttr) {\n                    // call `safeAttrValue()`\n                    value = safeAttrValue(tag, name, value, cssFilter);\n                    if (value) {\n                        return name + \"=\" + attributeWrapSign + value + attributeWrapSign;\n                    } else {\n                        return name;\n                    }\n                } else {\n                    // call `onIgnoreTagAttr()`\n                    ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);\n                    if (!isNull(ret)) return ret;\n                    return;\n                }\n            });\n            // build new tag html\n            html = \"<\" + tag;\n            if (attrsHtml) html += \" \" + attrsHtml;\n            if (attrs.closing) html += \" /\";\n            html += \">\";\n            return html;\n        } else {\n            // call `onIgnoreTag()`\n            ret = onIgnoreTag(tag, html, info);\n            if (!isNull(ret)) return ret;\n            return escapeHtml(html);\n        }\n    }, escapeHtml);\n    // if enable stripIgnoreTagBody\n    if (stripIgnoreTagBody) {\n        retHtml = stripIgnoreTagBody.remove(retHtml);\n    }\n    return retHtml;\n};\nmodule.exports = FilterXSS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/xss/lib/xss.js\n");

/***/ })

};
;